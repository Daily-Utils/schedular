# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserGraphQL {
  id: ID!
  username: String!
  email: String!
  role: String!
  sex: String!
  age: Int!
  phone: String!
}

type responseForAllDoctorsFind {
  id: Float!
  username: String!
}

type responseForAllDoctorsFindArray {
  doctors: [responseForAllDoctorsFind!]!
}

type TimingDto {
  day: String!
  to: String!
  from: String!
}

type DoctorResponseDto {
  id: Float!
  username: String!
  services: [String!]!
  speciality: [String!]!
  experience: Float!
  default_fee: Float!
  average_consulting_time: String!
  facility_name: String!
  facility_type: String!
  facility_location: String!
  timings: [TimingDto!]!
}

type DoctorAvailableSlots {
  slots: [String!]!
  actualTimings: [String!]!
}

type singleSearchResponse {
  id: Float!
  username: String!
  services: [String!]!
  speciality: [String!]!
  experience: Float!
  average_consulting_time: String!
  facility_name: String!
  facility_type: String!
  facility_location: String!
  default_fee: Float!
}

type ResponseDTO {
  message: String!
  status: String!
}

type AppointmentResponse {
  id: Float!
  patient_id: Float!
  fees: Float!
  status: String!
  visit_type: String!
  created_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PatientOutput {
  id: Float!
  username: String!
  age: Float!
  blood_group: String!
  health_issues: [String!]!
  weight: Float!
}

type responseForModificationDTOPaitent {
  status: String!
  message: String!
}

type AuthResponse {
  access_token: String!
}

type RoleOutput {
  roles_name: String!
  appointment_permission: [String!]!
  feedback_permission: [String!]!
  support_tickets_permissions: [String!]!
}

type RoleOutputForModification {
  status: Float!
  message: String!
}

type getAllTimingsForADoctorOutputDTO {
  id: Float!
  day: String!
  from: String!
  to: String!
  break_from: String!
  break_to: String!
}

type SupportOutputDTO {
  status: String!
  message: String!
}

type supportTicketCreateOutputDTO {
  id: Float!
  status: String!
  message: String!
  patient_user_id: Float!
}

type FeedbackCreateOutput {
  id: Float!
  patient_user_id: Float!
  consulting_feedback: Float!
  clinic_or_hospital_feedback: Float!
  waiting_time: Float!
}

type outputAppointment {
  id: Float!
  fees: Float!
  appointment_date_time: DateTime!
  visit_type: String!
  ivr_app_id: String!
  patient_complaint: String!
  patient_current_weight: Float!
  status: String!
}

type ChatMessageOutput {
  chat_id: Float!
  patient_user_id: Float!
  doctor_user_id: Float!
  type: String!
  message: String!
}

type Query {
  findAll: [UserGraphQL!]!
  findAllDoctors: responseForAllDoctorsFindArray!
  findDoctorById(id: Float!): DoctorResponseDto!
  searchDoctor(searchTerm: searchDTO!): [singleSearchResponse!]!
  getAvaliableSlotsForAppointmentsWithADoctor(doctorId: Float!, date: String!): DoctorAvailableSlots!
  searchAppointments(searchTerm: searchAppointmentDTO!): [AppointmentResponse!]!
  getAllPatientDetails: [PatientOutput!]!
  getPatientByUserId(user_id: Float!): PatientOutput!
  findAllPermissionForRoles(roleInput: RoleInput!): RoleOutput!
  checkWhetherPermissionExists(rolePermissionInput: RolePermissionVerificationInput!): Boolean!
  getTimingsForAllDoctor(doctor_id: Float!): [getAllTimingsForADoctorOutputDTO!]!
  getAllSupportTickets(patient_user_id: Float!): [supportTicketCreateOutputDTO!]!
  getFeedbacksForAPaitent(patient_user_id: Float!): [FeedbackCreateOutput!]!
  getAppointmentsForDoctor(doctor_user_id: Float!): [outputAppointment!]!
  getAppointmentsForPatients(patient_user_id: Float!): [outputAppointment!]!
  getChatMessages(patient_user_id: Float!, doctor_user_id: Float!): [ChatMessageOutput!]!
}

input searchDTO {
  username: String
  speciality: [String!]
  services: [String!]
  facility_name: String
  facility_location: String
  facility_type: String
  default_fee: Float
}

input searchAppointmentDTO {
  patient_user_id: Float
  id: Float
  status: String
  visit_type: String
}

input RoleInput {
  role_name: String!
}

input RolePermissionVerificationInput {
  role_name: String!
  permission: String!
  category: String!
}

type Mutation {
  login(login: LoginInput!): AuthResponse!
  register(register: RegisterInput!): UserGraphQL!
  modifyDoctorById(id: Float!, updateDoctorDto: UpdateDoctorDto!): ResponseDTO!
  deleteDoctorById(id: Float!): ResponseDTO!
  modifyPatientDetails(user_id: Float!, updatePatientDetails: UpdatePatientDto!): responseForModificationDTOPaitent!
  deletePatient(user_id: Float!): responseForModificationDTOPaitent!
  addPermissionToRole(rolePermissionInput: RolePermissionVerificationInput!): RoleOutputForModification!
  removePermissionFromRole(rolePermissionInput: RolePermissionVerificationInput!): RoleOutputForModification!
  updateTimingDetails(doctor_id: Float!, day: String!, updateTimingDetails: UpdateTimingDto!): ResponseDTO!
  deleteSingleTiming(doctor_id: Float!, day: String!): ResponseDTO!
  addTiming(createTimingDTO: createTimingDto!): ResponseDTO!
  createSupportTicket(createSupportTicket: CreateSupportTicketDto!): supportTicketCreateOutputDTO!
  updateSupportTicket(updateSupportTicket: UpdateSupportDTO!): SupportOutputDTO!
  deleteSupportTicket(id: Float!): SupportOutputDTO!
  createFeedback(feedbackData: CreateFeedbackInput!): FeedbackCreateOutput!
  deleteFeedback(id: Float!): ResponseDTO!
  updateFeedback(feedbackUpdateData: UpdateFeedbackInput!): ResponseDTO!
  createAppointment(appointment: createAppointmentDTO!): outputAppointment!
  getAppointmentById(id: Float!): outputAppointment!
  updateAppointment(updateAppointmentDTO: updateAppointmentDTO!): ResponseDTO!
  deleteAppointment(id: Float!): ResponseDTO!
  bulkUpdateAppointments(bulkUpdate: bulkUpdateDTO!): ResponseDTO!
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): ChatMessageOutput!
  updateChatMessage(id: Float!, updateChatMessageInput: UpdateChatMessageInput!): ResponseDTO!
  deleteChat(chat_id: Float!): ResponseDTO!
}

input LoginInput {
  username: String!
  password: String!
  phone: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  sex: String!
  age: Float!
  role: String!
  phone: String!
  services: [String!]
  speciality: [String!]
  default_fee: Float
  average_consulting_time: String
  experience: Float
  facility_name: String
  facility_type: String
  facility_location: String
  family_member: [Int!]
  relation: [String!]
  health_issues: [String!]
  blood_group: String
  weight: Float
}

input UpdateDoctorDto {
  services: [String!]
  speciality: [String!]
  experience: Float
  default_fee: Float
  average_consulting_time: String
  facility_name: String
  facility_type: String
  facility_location: String
  user_id: Float
}

input UpdatePatientDto {
  blood_group: String
  weight: Float
  relation: [String!]
  family_member: [Float!]
  health_issues: [String!]
}

input UpdateTimingDto {
  to: String
  from: String
  break_from: String
  break_to: String
}

input createTimingDto {
  doctor_user_id: Float!
  day: String!
  from: String!
  to: String!
  break_from: String!
  break_to: String!
}

input CreateSupportTicketDto {
  patient_user_id: Float!
  message: String!
  status: String!
}

input UpdateSupportDTO {
  id: Float!
  message: String!
  status: String!
  patient_user_id: Float!
}

input CreateFeedbackInput {
  patient_user_id: Float!
  doctor_user_id: Float!
  consulting_feedback: Float!
  clinic_or_hospital_feedback: Float!
  waiting_time: Float!
}

input UpdateFeedbackInput {
  id: Float!
  consulting_feedback: Float!
  clinic_or_hospital_feedback: Float!
  waiting_time: Float!
}

input createAppointmentDTO {
  patient_user_id: Float!
  doctor_user_id: Float!
  appointment_date_time: DateTime!
  status: String!
  fees: Float!
  visit_type: String!
  ivr_app_id: String!
  patient_complaint: String!
  patient_current_weight: Float!
}

input updateAppointmentDTO {
  id: Float!
  fees: Float
  appointment_date_time: DateTime
  visit_type: String
  ivr_app_id: String
  patient_complaint: String
  patient_current_weight: Float
  status: String
}

input bulkUpdateDTO {
  doctor_user_id: Float!
  appointment_ids: [Float!]!
  to: DateTime!
  from: DateTime!
  preference: String!
}

input CreateChatMessageInput {
  patient_user_id: Float!
  doctor_user_id: Float!
  type: String!
  message: String!
}

input UpdateChatMessageInput {
  message: String!
}

type Subscription {
  newMessage(patient_user_id: Float!, doctor_user_id: Float!): ChatMessageOutput!
}